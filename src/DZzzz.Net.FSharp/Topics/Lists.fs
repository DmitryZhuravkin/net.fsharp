module Lists

(*Lists are immutable*)

let emptyList = []
let listValues = [1; 2; 4;]
let rangeList = [1 .. 99]

let consElementToList = 15 :: listValues // add element to head of list
let concatinatedList = listValues @ [5] // concat two lists
let tempList = 45 :: listValues @ rangeList

(*List pattern matching*)
let primes = 15 :: [1 .. 17]

let printFirst primes =
    match primes with
    | h :: _ -> printfn "The first prime in the list is %d" h
    | [] -> printfn "No primes found in the list"

printFirst primes

(*List methods*)
let test = [15 .. 32]

// List.length : 'a list -> int             Returns the length of the list.
printfn "List.length: %d, property: %d" (List.length test) test.Length

//List.head : 'a list -> 'a                 Returns the first element of a nonempty list.
printfn "List.head: %d, property: %d" (List.head test) test.Head

//List.tl : 'a list -> 'a list Returns all the elements of a nonempty list except the first.
//List.init : int -> (int -> 'a) -> 'a list Returns a new list of length given by the first parameter and elements generated by the second function parameter.
//List.append : 'a list -> 'a list -> 'a list Returns a new list containing the elements of the first list followed by the elements of the second list.
//List.filter : ('a -> bool) -> 'a list -> 'a list Returns a new list containing only those elements of the original list where the function returns true.
//List.map : ('a -> 'b ) -> 'a list -> 'b list Returns a new list where the function has been applied to each element of the list.
//List.iter : ('a -> unit) -> 'a list -> unit Executes the given function for each element of the list.
//List.unzip : ('a * 'b) list -> 'a list * 'b list Returns two new lists containing the first and second elements of the pairs in the input list.
//List.zip : 'a list -> 'b list -> ('a * 'b) list Returns a new list containing the elements of the two input lists combined pairwise. The input lists must be the same length; otherwise, an exception is raised.
//List.to_array : 'a list -> 'a[] Converts the list to an array.
//List.of_array : 'a[] -> 'a list Converts the array to a list.